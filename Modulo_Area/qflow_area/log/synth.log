Qflow synthesis logfile created on jue 1 jul 09:13:29 CST 2021
Running yosys for verilog parsing and synthesis
yosys  -s modulo_area.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `modulo_area.ys' --

1. Executing Liberty frontend.
Imported 32 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v
Parsing Verilog input from `/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v' to AST representation.
Generating RTLIL representation for module `\modulo_area'.
Generating RTLIL representation for module `\micro_ucr_hash'.
Generating RTLIL representation for module `\entrada_hash'.
Generating RTLIL representation for module `\mainfor1'.
Generating RTLIL representation for module `\mainfor2'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \modulo_area
Used module:     \micro_ucr_hash
Used module:         \mainfor2
Used module:         \mainfor1
Used module:     \entrada_hash

3.1.2. Analyzing design hierarchy..
Top module:  \modulo_area
Used module:     \micro_ucr_hash
Used module:         \mainfor2
Used module:         \mainfor1
Used module:     \entrada_hash
Removed 0 unused modules.
Mapping positional arguments of cell micro_ucr_hash.$genblock$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:85$71[31].\mainfor22 (mainfor2).
Mapping positional arguments of cell micro_ucr_hash.$genblock$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:85$70[30].\mainfor22 (mainfor2).
Mapping positional arguments of cell micro_ucr_hash.$genblock$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:85$69[29].\mainfor22 (mainfor2).
Mapping positional arguments of cell micro_ucr_hash.$genblock$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:85$68[28].\mainfor22 (mainfor2).
Mapping positional arguments of cell micro_ucr_hash.$genblock$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:85$67[27].\mainfor22 (mainfor2).
Mapping positional arguments of cell micro_ucr_hash.$genblock$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:85$66[26].\mainfor22 (mainfor2).
Mapping positional arguments of cell micro_ucr_hash.$genblock$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:85$65[25].\mainfor22 (mainfor2).
Mapping positional arguments of cell micro_ucr_hash.$genblock$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:85$64[24].\mainfor22 (mainfor2).
Mapping positional arguments of cell micro_ucr_hash.$genblock$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:85$63[23].\mainfor22 (mainfor2).
Mapping positional arguments of cell micro_ucr_hash.$genblock$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:85$62[22].\mainfor22 (mainfor2).
Mapping positional arguments of cell micro_ucr_hash.$genblock$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:85$61[21].\mainfor22 (mainfor2).
Mapping positional arguments of cell micro_ucr_hash.$genblock$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:85$60[20].\mainfor22 (mainfor2).
Mapping positional arguments of cell micro_ucr_hash.$genblock$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:85$59[19].\mainfor22 (mainfor2).
Mapping positional arguments of cell micro_ucr_hash.$genblock$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:85$58[18].\mainfor22 (mainfor2).
Mapping positional arguments of cell micro_ucr_hash.$genblock$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:85$57[17].\mainfor22 (mainfor2).
Mapping positional arguments of cell micro_ucr_hash.$genblock$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:82$56[16].\mainfor11 (mainfor1).
Mapping positional arguments of cell micro_ucr_hash.$genblock$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:82$55[15].\mainfor11 (mainfor1).
Mapping positional arguments of cell micro_ucr_hash.$genblock$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:82$54[14].\mainfor11 (mainfor1).
Mapping positional arguments of cell micro_ucr_hash.$genblock$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:82$53[13].\mainfor11 (mainfor1).
Mapping positional arguments of cell micro_ucr_hash.$genblock$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:82$52[12].\mainfor11 (mainfor1).
Mapping positional arguments of cell micro_ucr_hash.$genblock$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:82$51[11].\mainfor11 (mainfor1).
Mapping positional arguments of cell micro_ucr_hash.$genblock$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:82$50[10].\mainfor11 (mainfor1).
Mapping positional arguments of cell micro_ucr_hash.$genblock$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:82$49[9].\mainfor11 (mainfor1).
Mapping positional arguments of cell micro_ucr_hash.$genblock$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:82$48[8].\mainfor11 (mainfor1).
Mapping positional arguments of cell micro_ucr_hash.$genblock$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:82$47[7].\mainfor11 (mainfor1).
Mapping positional arguments of cell micro_ucr_hash.$genblock$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:82$46[6].\mainfor11 (mainfor1).
Mapping positional arguments of cell micro_ucr_hash.$genblock$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:82$45[5].\mainfor11 (mainfor1).
Mapping positional arguments of cell micro_ucr_hash.$genblock$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:82$44[4].\mainfor11 (mainfor1).
Mapping positional arguments of cell micro_ucr_hash.$genblock$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:82$43[3].\mainfor11 (mainfor1).
Mapping positional arguments of cell micro_ucr_hash.$genblock$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:82$42[2].\mainfor11 (mainfor1).
Mapping positional arguments of cell micro_ucr_hash.$genblock$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:82$41[1].\mainfor11 (mainfor1).
Mapping positional arguments of cell micro_ucr_hash.mainfor0 (mainfor1).
Mapping positional arguments of cell modulo_area.micro_ucr_hash1 (micro_ucr_hash).
Mapping positional arguments of cell modulo_area.entrada_hash1 (entrada_hash).

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:107$108 in module entrada_hash.
Marked 2 switch rules as full_case in process $proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:21$2 in module modulo_area.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\entrada_hash.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:107$108'.
     1/2: $0\contadores[31:0]
     2/2: $0\nonce[31:0]
Creating decoders for process `\micro_ucr_hash.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:41$75'.
     1/32: $0\W[31][7:0]
     2/32: $0\W[30][7:0]
     3/32: $0\W[29][7:0]
     4/32: $0\W[28][7:0]
     5/32: $0\W[27][7:0]
     6/32: $0\W[26][7:0]
     7/32: $0\W[25][7:0]
     8/32: $0\W[24][7:0]
     9/32: $0\W[23][7:0]
    10/32: $0\W[22][7:0]
    11/32: $0\W[21][7:0]
    12/32: $0\W[20][7:0]
    13/32: $0\W[19][7:0]
    14/32: $0\W[18][7:0]
    15/32: $0\W[17][7:0]
    16/32: $0\W[16][7:0]
    17/32: $0\W[15][7:0]
    18/32: $0\W[14][7:0]
    19/32: $0\W[13][7:0]
    20/32: $0\W[12][7:0]
    21/32: $0\W[11][7:0]
    22/32: $0\W[10][7:0]
    23/32: $0\W[9][7:0]
    24/32: $0\W[8][7:0]
    25/32: $0\W[7][7:0]
    26/32: $0\W[6][7:0]
    27/32: $0\W[5][7:0]
    28/32: $0\W[4][7:0]
    29/32: $0\W[3][7:0]
    30/32: $0\W[2][7:0]
    31/32: $0\W[1][7:0]
    32/32: $0\W[0][7:0]
Creating decoders for process `\modulo_area.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:21$2'.
     1/2: $1\hash[23:0]
     2/2: $0\terminado[0:0]
Creating decoders for process `\modulo_area.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:16$1'.
     1/1: $0\hash[23:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\micro_ucr_hash.\W[2]' from process `\micro_ucr_hash.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:41$75'.
No latch inferred for signal `\micro_ucr_hash.\W[3]' from process `\micro_ucr_hash.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:41$75'.
No latch inferred for signal `\micro_ucr_hash.\W[4]' from process `\micro_ucr_hash.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:41$75'.
No latch inferred for signal `\micro_ucr_hash.\W[5]' from process `\micro_ucr_hash.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:41$75'.
No latch inferred for signal `\micro_ucr_hash.\W[6]' from process `\micro_ucr_hash.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:41$75'.
No latch inferred for signal `\micro_ucr_hash.\W[7]' from process `\micro_ucr_hash.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:41$75'.
No latch inferred for signal `\micro_ucr_hash.\W[8]' from process `\micro_ucr_hash.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:41$75'.
No latch inferred for signal `\micro_ucr_hash.\W[0]' from process `\micro_ucr_hash.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:41$75'.
No latch inferred for signal `\micro_ucr_hash.\W[1]' from process `\micro_ucr_hash.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:41$75'.
No latch inferred for signal `\micro_ucr_hash.\W[9]' from process `\micro_ucr_hash.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:41$75'.
No latch inferred for signal `\micro_ucr_hash.\W[10]' from process `\micro_ucr_hash.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:41$75'.
No latch inferred for signal `\micro_ucr_hash.\W[11]' from process `\micro_ucr_hash.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:41$75'.
No latch inferred for signal `\micro_ucr_hash.\W[12]' from process `\micro_ucr_hash.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:41$75'.
No latch inferred for signal `\micro_ucr_hash.\W[13]' from process `\micro_ucr_hash.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:41$75'.
No latch inferred for signal `\micro_ucr_hash.\W[14]' from process `\micro_ucr_hash.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:41$75'.
No latch inferred for signal `\micro_ucr_hash.\W[15]' from process `\micro_ucr_hash.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:41$75'.
No latch inferred for signal `\micro_ucr_hash.\W[16]' from process `\micro_ucr_hash.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:41$75'.
No latch inferred for signal `\micro_ucr_hash.\W[17]' from process `\micro_ucr_hash.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:41$75'.
No latch inferred for signal `\micro_ucr_hash.\W[18]' from process `\micro_ucr_hash.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:41$75'.
No latch inferred for signal `\micro_ucr_hash.\W[19]' from process `\micro_ucr_hash.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:41$75'.
No latch inferred for signal `\micro_ucr_hash.\W[20]' from process `\micro_ucr_hash.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:41$75'.
No latch inferred for signal `\micro_ucr_hash.\W[21]' from process `\micro_ucr_hash.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:41$75'.
No latch inferred for signal `\micro_ucr_hash.\W[22]' from process `\micro_ucr_hash.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:41$75'.
No latch inferred for signal `\micro_ucr_hash.\W[23]' from process `\micro_ucr_hash.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:41$75'.
No latch inferred for signal `\micro_ucr_hash.\W[24]' from process `\micro_ucr_hash.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:41$75'.
No latch inferred for signal `\micro_ucr_hash.\W[25]' from process `\micro_ucr_hash.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:41$75'.
No latch inferred for signal `\micro_ucr_hash.\W[26]' from process `\micro_ucr_hash.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:41$75'.
No latch inferred for signal `\micro_ucr_hash.\W[27]' from process `\micro_ucr_hash.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:41$75'.
No latch inferred for signal `\micro_ucr_hash.\W[28]' from process `\micro_ucr_hash.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:41$75'.
No latch inferred for signal `\micro_ucr_hash.\W[29]' from process `\micro_ucr_hash.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:41$75'.
No latch inferred for signal `\micro_ucr_hash.\W[30]' from process `\micro_ucr_hash.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:41$75'.
No latch inferred for signal `\micro_ucr_hash.\W[31]' from process `\micro_ucr_hash.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:41$75'.

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\entrada_hash.\nonce' using process `\entrada_hash.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:107$108'.
  created $dff cell `$procdff$144' with positive edge clock.
Creating register for signal `\entrada_hash.\contadores' using process `\entrada_hash.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:107$108'.
  created $dff cell `$procdff$145' with positive edge clock.
Creating register for signal `\modulo_area.\terminado' using process `\modulo_area.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:21$2'.
  created $dff cell `$procdff$146' with positive edge clock.
Creating register for signal `\modulo_area.\hash' using process `\modulo_area.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:21$2'.
  created $dff cell `$procdff$147' with positive edge clock.
Creating register for signal `\modulo_area.\hash' using process `\modulo_area.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:16$1'.
  created $dff cell `$procdff$148' with positive edge clock.

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\entrada_hash.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:107$108'.
Removing empty process `entrada_hash.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:107$108'.
Removing empty process `micro_ucr_hash.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:41$75'.
Found and cleaned up 2 empty switches in `\modulo_area.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:21$2'.
Removing empty process `modulo_area.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:21$2'.
Removing empty process `modulo_area.$proc$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:16$1'.
Cleaned up 4 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module mainfor2.
<suppressed ~1 debug messages>
Optimizing module mainfor1.
<suppressed ~1 debug messages>
Optimizing module entrada_hash.
<suppressed ~5 debug messages>
Optimizing module micro_ucr_hash.
Optimizing module modulo_area.
<suppressed ~4 debug messages>

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mainfor2..
Finding unused cells or wires in module \mainfor1..
Finding unused cells or wires in module \entrada_hash..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \modulo_area..
Removed 2 unused cells and 74 unused wires.
<suppressed ~7 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
checking module entrada_hash..
checking module mainfor1..
checking module mainfor2..
checking module micro_ucr_hash..
checking module modulo_area..
Warning: multiple conflicting drivers for modulo_area.\hash [23]:
    port Q[23] of cell $procdff$147 ($dff)
    port Q[23] of cell $procdff$148 ($dff)
Warning: multiple conflicting drivers for modulo_area.\hash [22]:
    port Q[22] of cell $procdff$147 ($dff)
    port Q[22] of cell $procdff$148 ($dff)
Warning: multiple conflicting drivers for modulo_area.\hash [21]:
    port Q[21] of cell $procdff$147 ($dff)
    port Q[21] of cell $procdff$148 ($dff)
Warning: multiple conflicting drivers for modulo_area.\hash [20]:
    port Q[20] of cell $procdff$147 ($dff)
    port Q[20] of cell $procdff$148 ($dff)
Warning: multiple conflicting drivers for modulo_area.\hash [19]:
    port Q[19] of cell $procdff$147 ($dff)
    port Q[19] of cell $procdff$148 ($dff)
Warning: multiple conflicting drivers for modulo_area.\hash [18]:
    port Q[18] of cell $procdff$147 ($dff)
    port Q[18] of cell $procdff$148 ($dff)
Warning: multiple conflicting drivers for modulo_area.\hash [17]:
    port Q[17] of cell $procdff$147 ($dff)
    port Q[17] of cell $procdff$148 ($dff)
Warning: multiple conflicting drivers for modulo_area.\hash [16]:
    port Q[16] of cell $procdff$147 ($dff)
    port Q[16] of cell $procdff$148 ($dff)
Warning: multiple conflicting drivers for modulo_area.\hash [15]:
    port Q[15] of cell $procdff$147 ($dff)
    port Q[15] of cell $procdff$148 ($dff)
Warning: multiple conflicting drivers for modulo_area.\hash [14]:
    port Q[14] of cell $procdff$147 ($dff)
    port Q[14] of cell $procdff$148 ($dff)
Warning: multiple conflicting drivers for modulo_area.\hash [13]:
    port Q[13] of cell $procdff$147 ($dff)
    port Q[13] of cell $procdff$148 ($dff)
Warning: multiple conflicting drivers for modulo_area.\hash [12]:
    port Q[12] of cell $procdff$147 ($dff)
    port Q[12] of cell $procdff$148 ($dff)
Warning: multiple conflicting drivers for modulo_area.\hash [11]:
    port Q[11] of cell $procdff$147 ($dff)
    port Q[11] of cell $procdff$148 ($dff)
Warning: multiple conflicting drivers for modulo_area.\hash [10]:
    port Q[10] of cell $procdff$147 ($dff)
    port Q[10] of cell $procdff$148 ($dff)
Warning: multiple conflicting drivers for modulo_area.\hash [9]:
    port Q[9] of cell $procdff$147 ($dff)
    port Q[9] of cell $procdff$148 ($dff)
Warning: multiple conflicting drivers for modulo_area.\hash [8]:
    port Q[8] of cell $procdff$147 ($dff)
    port Q[8] of cell $procdff$148 ($dff)
Warning: multiple conflicting drivers for modulo_area.\hash [7]:
    port Q[7] of cell $procdff$147 ($dff)
    port Q[7] of cell $procdff$148 ($dff)
Warning: multiple conflicting drivers for modulo_area.\hash [6]:
    port Q[6] of cell $procdff$147 ($dff)
    port Q[6] of cell $procdff$148 ($dff)
Warning: multiple conflicting drivers for modulo_area.\hash [5]:
    port Q[5] of cell $procdff$147 ($dff)
    port Q[5] of cell $procdff$148 ($dff)
Warning: multiple conflicting drivers for modulo_area.\hash [4]:
    port Q[4] of cell $procdff$147 ($dff)
    port Q[4] of cell $procdff$148 ($dff)
Warning: multiple conflicting drivers for modulo_area.\hash [3]:
    port Q[3] of cell $procdff$147 ($dff)
    port Q[3] of cell $procdff$148 ($dff)
Warning: multiple conflicting drivers for modulo_area.\hash [2]:
    port Q[2] of cell $procdff$147 ($dff)
    port Q[2] of cell $procdff$148 ($dff)
Warning: multiple conflicting drivers for modulo_area.\hash [1]:
    port Q[1] of cell $procdff$147 ($dff)
    port Q[1] of cell $procdff$148 ($dff)
Warning: multiple conflicting drivers for modulo_area.\hash [0]:
    port Q[0] of cell $procdff$147 ($dff)
    port Q[0] of cell $procdff$148 ($dff)
found and reported 24 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module entrada_hash.
Optimizing module mainfor1.
Optimizing module mainfor2.
Optimizing module micro_ucr_hash.
Optimizing module modulo_area.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\entrada_hash'.
Finding identical cells in module `\mainfor1'.
Finding identical cells in module `\mainfor2'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\modulo_area'.
Removed a total of 0 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \entrada_hash..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mainfor1..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mainfor2..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \micro_ucr_hash..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \modulo_area..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \entrada_hash.
  Optimizing cells in module \mainfor1.
  Optimizing cells in module \mainfor2.
  Optimizing cells in module \micro_ucr_hash.
  Optimizing cells in module \modulo_area.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\entrada_hash'.
Finding identical cells in module `\mainfor1'.
Finding identical cells in module `\mainfor2'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\modulo_area'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $procdff$147 ($dff) from module modulo_area.
Replaced 1 DFF cells.

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \entrada_hash..
Finding unused cells or wires in module \mainfor1..
Finding unused cells or wires in module \mainfor2..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \modulo_area..
Warning: Driver-driver conflict for \hash [23] between cell $procdff$148.Q and constant 1'0 in modulo_area: Resolved using constant.
Warning: Driver-driver conflict for \hash [22] between cell $procdff$148.Q and constant 1'0 in modulo_area: Resolved using constant.
Warning: Driver-driver conflict for \hash [21] between cell $procdff$148.Q and constant 1'0 in modulo_area: Resolved using constant.
Warning: Driver-driver conflict for \hash [20] between cell $procdff$148.Q and constant 1'0 in modulo_area: Resolved using constant.
Warning: Driver-driver conflict for \hash [19] between cell $procdff$148.Q and constant 1'0 in modulo_area: Resolved using constant.
Warning: Driver-driver conflict for \hash [18] between cell $procdff$148.Q and constant 1'0 in modulo_area: Resolved using constant.
Warning: Driver-driver conflict for \hash [17] between cell $procdff$148.Q and constant 1'0 in modulo_area: Resolved using constant.
Warning: Driver-driver conflict for \hash [16] between cell $procdff$148.Q and constant 1'0 in modulo_area: Resolved using constant.
Warning: Driver-driver conflict for \hash [15] between cell $procdff$148.Q and constant 1'0 in modulo_area: Resolved using constant.
Warning: Driver-driver conflict for \hash [14] between cell $procdff$148.Q and constant 1'0 in modulo_area: Resolved using constant.
Warning: Driver-driver conflict for \hash [13] between cell $procdff$148.Q and constant 1'0 in modulo_area: Resolved using constant.
Warning: Driver-driver conflict for \hash [12] between cell $procdff$148.Q and constant 1'0 in modulo_area: Resolved using constant.
Warning: Driver-driver conflict for \hash [11] between cell $procdff$148.Q and constant 1'0 in modulo_area: Resolved using constant.
Warning: Driver-driver conflict for \hash [10] between cell $procdff$148.Q and constant 1'0 in modulo_area: Resolved using constant.
Warning: Driver-driver conflict for \hash [9] between cell $procdff$148.Q and constant 1'0 in modulo_area: Resolved using constant.
Warning: Driver-driver conflict for \hash [8] between cell $procdff$148.Q and constant 1'0 in modulo_area: Resolved using constant.
Warning: Driver-driver conflict for \hash [7] between cell $procdff$148.Q and constant 1'0 in modulo_area: Resolved using constant.
Warning: Driver-driver conflict for \hash [6] between cell $procdff$148.Q and constant 1'0 in modulo_area: Resolved using constant.
Warning: Driver-driver conflict for \hash [5] between cell $procdff$148.Q and constant 1'0 in modulo_area: Resolved using constant.
Warning: Driver-driver conflict for \hash [4] between cell $procdff$148.Q and constant 1'0 in modulo_area: Resolved using constant.
Warning: Driver-driver conflict for \hash [3] between cell $procdff$148.Q and constant 1'0 in modulo_area: Resolved using constant.
Warning: Driver-driver conflict for \hash [2] between cell $procdff$148.Q and constant 1'0 in modulo_area: Resolved using constant.
Warning: Driver-driver conflict for \hash [1] between cell $procdff$148.Q and constant 1'0 in modulo_area: Resolved using constant.
Warning: Driver-driver conflict for \hash [0] between cell $procdff$148.Q and constant 1'0 in modulo_area: Resolved using constant.
Removed 2 unused cells and 1 unused wires.
<suppressed ~3 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module entrada_hash.
Optimizing module mainfor1.
Optimizing module mainfor2.
Optimizing module micro_ucr_hash.
Optimizing module modulo_area.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \entrada_hash..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mainfor1..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mainfor2..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \micro_ucr_hash..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \modulo_area..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \entrada_hash.
  Optimizing cells in module \mainfor1.
  Optimizing cells in module \mainfor2.
  Optimizing cells in module \micro_ucr_hash.
  Optimizing cells in module \modulo_area.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\entrada_hash'.
Finding identical cells in module `\mainfor1'.
Finding identical cells in module `\mainfor2'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\modulo_area'.
Removed a total of 0 cells.

3.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \entrada_hash..
Finding unused cells or wires in module \mainfor1..
Finding unused cells or wires in module \mainfor2..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \modulo_area..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module entrada_hash.
Optimizing module mainfor1.
Optimizing module mainfor2.
Optimizing module micro_ucr_hash.
Optimizing module modulo_area.

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell entrada_hash.$add$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:113$113 ($add).
Removed top 7 bits (of 8) from port A of cell micro_ucr_hash.$add$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:90$72 ($add).

3.8. Executing PEEPOPT pass (run peephole optimizers).

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \entrada_hash..
Finding unused cells or wires in module \mainfor1..
Finding unused cells or wires in module \mainfor2..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \modulo_area..

3.10. Executing TECHMAP pass (map to technology primitives).

3.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~20 debug messages>

3.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module entrada_hash:
  creating $macc model for $add$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:113$113 ($add).
  creating $alu model for $macc $add$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:113$113.
  creating $alu cell for $add$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:113$113: $auto$alumacc.cc:474:replace_alu$149
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module mainfor1:
  creating $macc model for $add$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:142$117 ($add).
  creating $macc model for $add$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:142$118 ($add).
  merging $macc model for $add$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:142$117 into $add$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:142$118.
  creating $macc cell for $add$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:142$118: $auto$alumacc.cc:354:replace_macc$152
  created 0 $alu and 1 $macc cells.
Extracting $alu and $macc cells in module mainfor2:
  creating $macc model for $add$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:165$122 ($add).
  creating $macc model for $add$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:165$123 ($add).
  merging $macc model for $add$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:165$122 into $add$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:165$123.
  creating $macc cell for $add$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:165$123: $auto$alumacc.cc:354:replace_macc$153
  created 0 $alu and 1 $macc cells.
Extracting $alu and $macc cells in module micro_ucr_hash:
  creating $macc model for $add$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:90$72 ($add).
  creating $macc model for $add$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:91$73 ($add).
  creating $macc model for $add$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:92$74 ($add).
  creating $alu model for $macc $add$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:92$74.
  creating $alu model for $macc $add$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:91$73.
  creating $alu model for $macc $add$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:90$72.
  creating $alu cell for $add$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:90$72: $auto$alumacc.cc:474:replace_alu$154
  creating $alu cell for $add$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:91$73: $auto$alumacc.cc:474:replace_alu$157
  creating $alu cell for $add$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:92$74: $auto$alumacc.cc:474:replace_alu$160
  created 3 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module modulo_area:
  creating $alu model for $lt$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:27$4 ($lt): new $alu
  creating $alu model for $lt$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:27$5 ($lt): new $alu
  creating $alu cell for $lt$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:27$5: $auto$alumacc.cc:474:replace_alu$165
  creating $alu cell for $lt$/home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/source/Modelo_area_junto.v:27$4: $auto$alumacc.cc:474:replace_alu$176
  created 2 $alu and 0 $macc cells.

3.12. Executing SHARE pass (SAT-based resource sharing).

3.13. Executing OPT pass (performing simple optimizations).

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module entrada_hash.
Optimizing module mainfor1.
Optimizing module mainfor2.
Optimizing module micro_ucr_hash.
Optimizing module modulo_area.

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\entrada_hash'.
Finding identical cells in module `\mainfor1'.
Finding identical cells in module `\mainfor2'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\modulo_area'.
Removed a total of 0 cells.

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \entrada_hash..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mainfor1..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mainfor2..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \micro_ucr_hash..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \modulo_area..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \entrada_hash.
  Optimizing cells in module \mainfor1.
  Optimizing cells in module \mainfor2.
  Optimizing cells in module \micro_ucr_hash.
  Optimizing cells in module \modulo_area.
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$168: { $auto$alumacc.cc:490:replace_alu$166 [0] $auto$alumacc.cc:490:replace_alu$166 [1] $auto$alumacc.cc:490:replace_alu$166 [2] $auto$alumacc.cc:490:replace_alu$166 [3] $auto$alumacc.cc:490:replace_alu$166 [4] $auto$alumacc.cc:490:replace_alu$166 [5] $auto$alumacc.cc:490:replace_alu$166 [6] $auto$alumacc.cc:490:replace_alu$166 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$179: { $auto$alumacc.cc:490:replace_alu$177 [0] $auto$alumacc.cc:490:replace_alu$177 [1] $auto$alumacc.cc:490:replace_alu$177 [2] $auto$alumacc.cc:490:replace_alu$177 [3] $auto$alumacc.cc:490:replace_alu$177 [4] $auto$alumacc.cc:490:replace_alu$177 [5] $auto$alumacc.cc:490:replace_alu$177 [6] $auto$alumacc.cc:490:replace_alu$177 [7] }
  Optimizing cells in module \modulo_area.
Performed a total of 2 changes.

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\entrada_hash'.
Finding identical cells in module `\mainfor1'.
Finding identical cells in module `\mainfor2'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\modulo_area'.
Removed a total of 0 cells.

3.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \entrada_hash..
Finding unused cells or wires in module \mainfor1..
Finding unused cells or wires in module \mainfor2..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \modulo_area..
Removed 2 unused cells and 4 unused wires.
<suppressed ~5 debug messages>

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module entrada_hash.
Optimizing module mainfor1.
Optimizing module mainfor2.
Optimizing module micro_ucr_hash.
Optimizing module modulo_area.

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \entrada_hash..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mainfor1..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mainfor2..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \micro_ucr_hash..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \modulo_area..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \entrada_hash.
  Optimizing cells in module \mainfor1.
  Optimizing cells in module \mainfor2.
  Optimizing cells in module \micro_ucr_hash.
  Optimizing cells in module \modulo_area.
Performed a total of 0 changes.

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\entrada_hash'.
Finding identical cells in module `\mainfor1'.
Finding identical cells in module `\mainfor2'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\modulo_area'.
Removed a total of 0 cells.

3.13.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \entrada_hash..
Finding unused cells or wires in module \mainfor1..
Finding unused cells or wires in module \mainfor2..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \modulo_area..

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module entrada_hash.
Optimizing module mainfor1.
Optimizing module mainfor2.
Optimizing module micro_ucr_hash.
Optimizing module modulo_area.

3.13.16. Finished OPT passes. (There is nothing left to do.)

3.14. Executing FSM pass (extract and optimize FSM).

3.14.1. Executing FSM_DETECT pass (finding FSMs in design).

3.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \entrada_hash..
Finding unused cells or wires in module \mainfor1..
Finding unused cells or wires in module \mainfor2..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \modulo_area..

3.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module entrada_hash.
Optimizing module mainfor1.
Optimizing module mainfor2.
Optimizing module micro_ucr_hash.
Optimizing module modulo_area.

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\entrada_hash'.
Finding identical cells in module `\mainfor1'.
Finding identical cells in module `\mainfor2'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\modulo_area'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \entrada_hash..
Finding unused cells or wires in module \mainfor1..
Finding unused cells or wires in module \mainfor2..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \modulo_area..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY pass.

3.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \entrada_hash..
Finding unused cells or wires in module \mainfor1..
Finding unused cells or wires in module \mainfor2..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \modulo_area..

3.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \entrada_hash..
Finding unused cells or wires in module \mainfor1..
Finding unused cells or wires in module \mainfor2..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \modulo_area..

3.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \entrada_hash..
Finding unused cells or wires in module \mainfor1..
Finding unused cells or wires in module \mainfor2..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \modulo_area..

3.18. Executing OPT pass (performing simple optimizations).

3.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module entrada_hash.
Optimizing module mainfor1.
Optimizing module mainfor2.
Optimizing module micro_ucr_hash.
Optimizing module modulo_area.
<suppressed ~2 debug messages>

3.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\entrada_hash'.
Finding identical cells in module `\mainfor1'.
Finding identical cells in module `\mainfor2'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\modulo_area'.
Removed a total of 0 cells.

3.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \entrada_hash..
Finding unused cells or wires in module \mainfor1..
Finding unused cells or wires in module \mainfor2..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \modulo_area..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.18.5. Finished fast OPT passes.

3.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.20. Executing OPT pass (performing simple optimizations).

3.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module entrada_hash.
Optimizing module mainfor1.
Optimizing module mainfor2.
Optimizing module micro_ucr_hash.
Optimizing module modulo_area.

3.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\entrada_hash'.
Finding identical cells in module `\mainfor1'.
Finding identical cells in module `\mainfor2'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\modulo_area'.
Removed a total of 0 cells.

3.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \entrada_hash..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mainfor1..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mainfor2..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \micro_ucr_hash..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \modulo_area..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \entrada_hash.
  Optimizing cells in module \mainfor1.
  Optimizing cells in module \mainfor2.
  Optimizing cells in module \micro_ucr_hash.
  Optimizing cells in module \modulo_area.
Performed a total of 0 changes.

3.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\entrada_hash'.
Finding identical cells in module `\mainfor1'.
Finding identical cells in module `\mainfor2'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\modulo_area'.
Removed a total of 0 cells.

3.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \entrada_hash..
Finding unused cells or wires in module \mainfor1..
Finding unused cells or wires in module \mainfor2..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \modulo_area..

3.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module entrada_hash.
Optimizing module mainfor1.
Optimizing module mainfor2.
Optimizing module micro_ucr_hash.
Optimizing module modulo_area.

3.20.9. Finished OPT passes. (There is nothing left to do.)

3.21. Executing TECHMAP pass (map to technology primitives).

3.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=8 for cells of type $lcu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32 for cells of type $lcu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using extmapper maccmap for cells of type $macc.
  add \x (8 bits, unsigned)
  add \W (8 bits, unsigned)
  add 8'10011001 (8 bits, unsigned)
Using template $paramod\_90_fa\WIDTH=8 for cells of type $fa.
  add \x (8 bits, unsigned)
  add \W (8 bits, unsigned)
  add 8'10100001 (8 bits, unsigned)
No more expansions possible.
<suppressed ~823 debug messages>

3.22. Executing OPT pass (performing simple optimizations).

3.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module entrada_hash.
<suppressed ~182 debug messages>
Optimizing module mainfor1.
<suppressed ~34 debug messages>
Optimizing module mainfor2.
<suppressed ~36 debug messages>
Optimizing module micro_ucr_hash.
<suppressed ~120 debug messages>
Optimizing module modulo_area.
<suppressed ~20 debug messages>

3.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\entrada_hash'.
Finding identical cells in module `\mainfor1'.
Finding identical cells in module `\mainfor2'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\modulo_area'.
<suppressed ~24 debug messages>
Removed a total of 8 cells.

3.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \entrada_hash..
Finding unused cells or wires in module \mainfor1..
Finding unused cells or wires in module \mainfor2..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \modulo_area..
Removed 128 unused cells and 390 unused wires.
<suppressed ~133 debug messages>

3.22.5. Finished fast OPT passes.

3.23. Executing ABC pass (technology mapping using ABC).

3.23.1. Extracting gate netlist of module `\entrada_hash' to `<abc-temp-dir>/input.blif'..
Extracted 182 gates and 219 wires to a netlist network with 35 inputs and 64 outputs.

3.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       32
ABC RESULTS:            ANDNOT cells:       48
ABC RESULTS:               MUX cells:       31
ABC RESULTS:              NAND cells:       15
ABC RESULTS:               NOR cells:        1
ABC RESULTS:               NOT cells:       32
ABC RESULTS:                OR cells:       20
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:              XNOR cells:        2
ABC RESULTS:               XOR cells:       30
ABC RESULTS:        internal signals:      120
ABC RESULTS:           input signals:       35
ABC RESULTS:          output signals:       64
Removing temp directory.

3.23.2. Extracting gate netlist of module `\mainfor1' to `<abc-temp-dir>/input.blif'..
Extracted 73 gates and 106 wires to a netlist network with 32 inputs and 16 outputs.

3.23.2.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.23.2.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:            ANDNOT cells:        9
ABC RESULTS:              AOI3 cells:        2
ABC RESULTS:               NOR cells:        2
ABC RESULTS:               NOT cells:        2
ABC RESULTS:              OAI3 cells:        3
ABC RESULTS:                OR cells:        4
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:              XNOR cells:       13
ABC RESULTS:               XOR cells:       24
ABC RESULTS:        internal signals:       58
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       16
Removing temp directory.

3.23.3. Extracting gate netlist of module `\mainfor2' to `<abc-temp-dir>/input.blif'..
Extracted 71 gates and 104 wires to a netlist network with 32 inputs and 16 outputs.

3.23.3.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.23.3.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:       12
ABC RESULTS:              AOI3 cells:        2
ABC RESULTS:              NAND cells:        3
ABC RESULTS:               NOR cells:        8
ABC RESULTS:               NOT cells:        1
ABC RESULTS:              OAI3 cells:        3
ABC RESULTS:                OR cells:        2
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:              XNOR cells:        9
ABC RESULTS:               XOR cells:       20
ABC RESULTS:        internal signals:       56
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       16
Removing temp directory.

3.23.4. Extracting gate netlist of module `\micro_ucr_hash' to `<abc-temp-dir>/input.blif'..
Extracted 320 gates and 456 wires to a netlist network with 135 inputs and 151 outputs.

3.23.4.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.23.4.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        5
ABC RESULTS:            ANDNOT cells:       22
ABC RESULTS:              AOI3 cells:        1
ABC RESULTS:              NAND cells:        4
ABC RESULTS:               NOR cells:        2
ABC RESULTS:               NOT cells:       36
ABC RESULTS:                OR cells:      103
ABC RESULTS:             ORNOT cells:       17
ABC RESULTS:              XNOR cells:       37
ABC RESULTS:               XOR cells:      111
ABC RESULTS:        internal signals:      170
ABC RESULTS:           input signals:      135
ABC RESULTS:          output signals:      151
Removing temp directory.

3.23.5. Extracting gate netlist of module `\modulo_area' to `<abc-temp-dir>/input.blif'..
Extracted 101 gates and 127 wires to a netlist network with 26 inputs and 1 outputs.

3.23.5.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.23.5.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:       13
ABC RESULTS:              AOI3 cells:        5
ABC RESULTS:              AOI4 cells:        2
ABC RESULTS:               NOR cells:        2
ABC RESULTS:              OAI3 cells:        6
ABC RESULTS:                OR cells:        8
ABC RESULTS:             ORNOT cells:       12
ABC RESULTS:              XNOR cells:        2
ABC RESULTS:               XOR cells:       14
ABC RESULTS:        internal signals:      100
ABC RESULTS:           input signals:       26
ABC RESULTS:          output signals:        1
Removing temp directory.

3.24. Executing OPT pass (performing simple optimizations).

3.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module entrada_hash.
<suppressed ~30 debug messages>
Optimizing module mainfor1.
Optimizing module mainfor2.
Optimizing module micro_ucr_hash.
Optimizing module modulo_area.

3.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\entrada_hash'.
Finding identical cells in module `\mainfor1'.
Finding identical cells in module `\mainfor2'.
Finding identical cells in module `\micro_ucr_hash'.
<suppressed ~6 debug messages>
Finding identical cells in module `\modulo_area'.
Removed a total of 2 cells.

3.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \entrada_hash..
Finding unused cells or wires in module \mainfor1..
Finding unused cells or wires in module \mainfor2..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \modulo_area..
Removed 1 unused cells and 659 unused wires.
<suppressed ~8 debug messages>

3.24.5. Finished fast OPT passes.

3.25. Executing HIERARCHY pass (managing design hierarchy).

3.25.1. Analyzing design hierarchy..
Top module:  \modulo_area
Used module:     \entrada_hash
Used module:     \micro_ucr_hash
Used module:         \mainfor1
Used module:         \mainfor2

3.25.2. Analyzing design hierarchy..
Top module:  \modulo_area
Used module:     \entrada_hash
Used module:     \micro_ucr_hash
Used module:         \mainfor1
Used module:         \mainfor2
Removed 0 unused modules.

3.26. Printing statistics.

=== entrada_hash ===

   Number of wires:                155
   Number of wire bits:            279
   Number of public wires:           6
   Number of public wire bits:      68
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                275
     $_ANDNOT_                      48
     $_AND_                         32
     $_DFF_P_                       64
     $_MUX_                         31
     $_NAND_                        15
     $_NOR_                          1
     $_NOT_                         31
     $_ORNOT_                        1
     $_OR_                          20
     $_XNOR_                         2
     $_XOR_                         30

=== mainfor1 ===

   Number of wires:                 54
   Number of wire bits:            103
   Number of public wires:           7
   Number of public wire bits:      56
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 63
     $_ANDNOT_                       9
     $_AND_                          2
     $_AOI3_                         2
     $_NOR_                          2
     $_NOT_                          2
     $_OAI3_                         3
     $_ORNOT_                        2
     $_OR_                           4
     $_XNOR_                        13
     $_XOR_                         24

=== mainfor2 ===

   Number of wires:                 53
   Number of wire bits:            102
   Number of public wires:           7
   Number of public wire bits:      56
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 62
     $_ANDNOT_                      12
     $_AND_                          1
     $_AOI3_                         2
     $_NAND_                         3
     $_NOR_                          8
     $_NOT_                          1
     $_OAI3_                         3
     $_ORNOT_                        1
     $_OR_                           2
     $_XNOR_                         9
     $_XOR_                         20

=== micro_ucr_hash ===

   Number of wires:                318
   Number of wire bits:           1363
   Number of public wires:         133
   Number of public wire bits:    1178
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                368
     $_ANDNOT_                      22
     $_AND_                          5
     $_AOI3_                         1
     $_NAND_                         4
     $_NOR_                          2
     $_NOT_                         36
     $_ORNOT_                       17
     $_OR_                         101
     $_XNOR_                        37
     $_XOR_                        111
     mainfor1                       17
     mainfor2                       15

=== modulo_area ===

   Number of wires:                 73
   Number of wire bits:            252
   Number of public wires:           9
   Number of public wire bits:     188
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 67
     $_ANDNOT_                      13
     $_AOI3_                         5
     $_AOI4_                         2
     $_DFF_P_                        1
     $_NOR_                          2
     $_OAI3_                         6
     $_ORNOT_                       12
     $_OR_                           8
     $_XNOR_                         2
     $_XOR_                         14
     entrada_hash                    1
     micro_ucr_hash                  1

=== design hierarchy ===

   modulo_area                       1
     entrada_hash                    1
     micro_ucr_hash                  1
       mainfor1                     17
       mainfor2                     15

   Number of wires:               2259
   Number of wire bits:           5175
   Number of public wires:         372
   Number of public wire bits:    3226
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2677
     $_ANDNOT_                     416
     $_AND_                         86
     $_AOI3_                        70
     $_AOI4_                         2
     $_DFF_P_                       65
     $_MUX_                         31
     $_NAND_                        64
     $_NOR_                        159
     $_NOT_                        116
     $_OAI3_                       102
     $_ORNOT_                       79
     $_OR_                         227
     $_XNOR_                       397
     $_XOR_                        863

3.27. Executing CHECK pass (checking for obvious problems).
checking module entrada_hash..
checking module mainfor1..
checking module mainfor2..
checking module micro_ucr_hash..
checking module modulo_area..
found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=176.00) is a direct match for cell type $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
  final dff cell mappings:
    DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\entrada_hash':
  mapped 64 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\mainfor1':
Mapping DFF cells in module `\mainfor2':
Mapping DFF cells in module `\micro_ucr_hash':
Mapping DFF cells in module `\modulo_area':
  mapped 1 $_DFF_P_ cells to \DFFPOSX1 cells.

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module entrada_hash.
Optimizing module mainfor1.
Optimizing module mainfor2.
Optimizing module micro_ucr_hash.
Optimizing module modulo_area.

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\entrada_hash'.
Finding identical cells in module `\mainfor1'.
Finding identical cells in module `\mainfor2'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\modulo_area'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \entrada_hash..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mainfor1..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mainfor2..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \micro_ucr_hash..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \modulo_area..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \entrada_hash.
  Optimizing cells in module \mainfor1.
  Optimizing cells in module \mainfor2.
  Optimizing cells in module \micro_ucr_hash.
  Optimizing cells in module \modulo_area.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\entrada_hash'.
Finding identical cells in module `\mainfor1'.
Finding identical cells in module `\mainfor2'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\modulo_area'.
Removed a total of 0 cells.

5.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \entrada_hash..
Finding unused cells or wires in module \mainfor1..
Finding unused cells or wires in module \mainfor2..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \modulo_area..

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module entrada_hash.
Optimizing module mainfor1.
Optimizing module mainfor2.
Optimizing module micro_ucr_hash.
Optimizing module modulo_area.

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\entrada_hash' to `<abc-temp-dir>/input.blif'..
Extracted 211 gates and 246 wires to a netlist network with 35 inputs and 64 outputs.

6.1.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.36 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:       18
ABC RESULTS:           AOI21X1 cells:       27
ABC RESULTS:             INVX1 cells:       34
ABC RESULTS:           NAND2X1 cells:       29
ABC RESULTS:           NAND3X1 cells:       15
ABC RESULTS:            NOR2X1 cells:       50
ABC RESULTS:            NOR3X1 cells:       10
ABC RESULTS:           OAI21X1 cells:       24
ABC RESULTS:             OR2X2 cells:        2
ABC RESULTS:        internal signals:      147
ABC RESULTS:           input signals:       35
ABC RESULTS:          output signals:       64
Removing temp directory.

6.2. Extracting gate netlist of module `\mainfor1' to `<abc-temp-dir>/input.blif'..
Extracted 63 gates and 95 wires to a netlist network with 32 inputs and 16 outputs.

6.2.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.36 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.2.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        6
ABC RESULTS:           AOI21X1 cells:       12
ABC RESULTS:             INVX1 cells:       14
ABC RESULTS:           NAND2X1 cells:       19
ABC RESULTS:           NAND3X1 cells:       18
ABC RESULTS:            NOR2X1 cells:       10
ABC RESULTS:            NOR3X1 cells:        2
ABC RESULTS:           OAI21X1 cells:       17
ABC RESULTS:             OR2X2 cells:        8
ABC RESULTS:           XNOR2X1 cells:        9
ABC RESULTS:            XOR2X1 cells:       10
ABC RESULTS:        internal signals:       47
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       16
Removing temp directory.

6.3. Extracting gate netlist of module `\mainfor2' to `<abc-temp-dir>/input.blif'..
Extracted 62 gates and 94 wires to a netlist network with 32 inputs and 16 outputs.

6.3.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.36 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.3.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        4
ABC RESULTS:           AOI21X1 cells:        8
ABC RESULTS:           AOI22X1 cells:        1
ABC RESULTS:             INVX1 cells:       20
ABC RESULTS:           NAND2X1 cells:       19
ABC RESULTS:           NAND3X1 cells:       13
ABC RESULTS:            NOR2X1 cells:       12
ABC RESULTS:            NOR3X1 cells:        2
ABC RESULTS:           OAI21X1 cells:       19
ABC RESULTS:           XNOR2X1 cells:        4
ABC RESULTS:            XOR2X1 cells:        9
ABC RESULTS:        internal signals:       46
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       16
Removing temp directory.

6.4. Extracting gate netlist of module `\micro_ucr_hash' to `<abc-temp-dir>/input.blif'..
Extracted 336 gates and 471 wires to a netlist network with 135 inputs and 151 outputs.

6.4.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.36 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.4.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:       17
ABC RESULTS:           AOI21X1 cells:       44
ABC RESULTS:             INVX1 cells:      104
ABC RESULTS:           NAND2X1 cells:       66
ABC RESULTS:           NAND3X1 cells:       29
ABC RESULTS:            NOR2X1 cells:       37
ABC RESULTS:           OAI21X1 cells:       46
ABC RESULTS:             OR2X2 cells:       24
ABC RESULTS:           XNOR2X1 cells:       43
ABC RESULTS:            XOR2X1 cells:       12
ABC RESULTS:        internal signals:      185
ABC RESULTS:           input signals:      135
ABC RESULTS:          output signals:      151
Removing temp directory.

6.5. Extracting gate netlist of module `\modulo_area' to `<abc-temp-dir>/input.blif'..
Extracted 64 gates and 90 wires to a netlist network with 26 inputs and 1 outputs.

6.5.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.36 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.5.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        2
ABC RESULTS:           AOI21X1 cells:        6
ABC RESULTS:           AOI22X1 cells:       14
ABC RESULTS:             INVX1 cells:       25
ABC RESULTS:           NAND2X1 cells:       19
ABC RESULTS:           NAND3X1 cells:        3
ABC RESULTS:            NOR2X1 cells:       12
ABC RESULTS:           OAI21X1 cells:        9
ABC RESULTS:           OAI22X1 cells:        8
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:           XNOR2X1 cells:        2
ABC RESULTS:        internal signals:       63
ABC RESULTS:           input signals:       26
ABC RESULTS:          output signals:        1
Removing temp directory.

7. Executing FLATTEN pass (flatten design).
Using template micro_ucr_hash for cells of type micro_ucr_hash.
Using template entrada_hash for cells of type entrada_hash.
Using template mainfor1 for cells of type mainfor1.
Using template mainfor2 for cells of type mainfor2.
<suppressed ~34 debug messages>
No more expansions possible.
Deleting now unused module entrada_hash.
Deleting now unused module mainfor1.
Deleting now unused module mainfor2.
Deleting now unused module micro_ucr_hash.

8. Executing SETUNDEF pass (replace undef values with defined constants).
Removed 1264 unused cells and 5196 unused wires.

9. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port modulo_area.bloque_bytes: Missing option -inpad.
Don't map input port modulo_area.clk: Missing option -inpad.
Mapping port modulo_area.hash using BUFX2.
Don't map input port modulo_area.inicio: Missing option -inpad.
Don't map input port modulo_area.reset: Missing option -inpad.
Don't map input port modulo_area.target: Missing option -inpad.
Mapping port modulo_area.terminado using BUFX2.

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module modulo_area.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\modulo_area'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \modulo_area..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \modulo_area.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\modulo_area'.
Removed a total of 0 cells.

10.6. Executing OPT_RMDFF pass (remove dff with constant values).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \modulo_area..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module modulo_area.

10.9. Finished OPT passes. (There is nothing left to do.)

11. Executing BLIF backend.

12. Printing statistics.

=== modulo_area ===

   Number of wires:               2806
   Number of wire bits:           3729
   Number of public wires:        2806
   Number of public wire bits:    3729
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3348
     AND2X2                        164
     AOI21X1                       264
     AOI22X1                        21
     BUFX2                          25
     DFFPOSX1                       65
     INVX1                         495
     NAND2X1                       519
     NAND3X1                       372
     NOR2X1                        343
     NOR3X1                         58
     OAI21X1                       473
     OAI22X1                         8
     OR2X2                         121
     XNOR2X1                       187
     XOR2X1                        233

Warnings: 48 unique messages, 48 total
End of script. Logfile hash: b97cef9016
CPU: user 1.63s system 0.02s, MEM: 36.61 MB total, 30.77 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 23% 19x opt_clean (0 sec), 13% 1x flatten (0 sec), ...
Running getpowerground to determine power and ground net names.
getpowerground.tcl  /usr/share/qflow/tech/osu018/osu018_stdcells.lef
Cleaning up output syntax
ypostproc.tcl modulo_area_mapped.blif modulo_area /usr/share/qflow/tech/osu018/osu018.sh vdd gnd 
Cleaning up blif file syntax
Running blifFanout (iterative)
Each iteration calls:
blifFanout -l 100 -c 20 -I modulo_area_nofanout -s nullstring -p /usr/share/qflow/tech/osu018/osu018_stdcells.lib -b BUFX2,CLKBUF1 -i A,A -o Y,Y tmp.blif modulo_area.blif

blifFanout for qflow 1.3.17
Parsing library "osu018_stdcells"
End of library at line 6141
Lib Read:  Processed 6142 lines.
Top internal fanout is 30 (load 473.902) from node _2200_,
driven by INVX1 with strength 58.615 (fF driven at latency 100)
Top fanout load-to-strength ratio is 8.085 (latency = 808.5 ps)
Top input node fanout is 65 (load 1815.03) from node clk.
Warning 1: load of 84.7241 is 1.28812 times greater than strongest gate AOI22X1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 2: load of 89.7481 is 1.51891 times greater than strongest gate XNOR2X1
Warning 3: load of 89.7567 is 1.51905 times greater than strongest gate XNOR2X1
Warning 7: load of 95.3294 is 1.63008 times greater than strongest gate XOR2X1
Warning 8: load of 115.902 is 1.98186 times greater than strongest gate XOR2X1
Warning 16: load of 128.26 is 2.17069 times greater than strongest gate XNOR2X1
Warning 38: load of 158.217 is 2.67768 times greater than strongest gate XNOR2X1
Warning 958: load of 175.752 is 3.0202 times greater than strongest gate NOR2X1
1208 gates exceed specified minimum load.
19 buffers were added.
72 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 3038    	Out: 2966    	-72
	"2" gates	In: 498    	Out: 569    	+71

Number of gates changed: 91
gates resized: 91
blifFanout for qflow 1.3.17
Parsing library "osu018_stdcells"
End of library at line 6141
Lib Read:  Processed 6142 lines.
Top internal fanout is 10 (load 540.756) from node _2279_,
driven by NOR2X1 with strength 58.1923 (fF driven at latency 100)
Top fanout load-to-strength ratio is 3.00872 (latency = 300.872 ps)
Top input node fanout is 9 (load 299.13) from node target[3].
Warning 1: load of 550.756 is 2.37789 times greater than strongest gate CLKBUF1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 47: load of 158.217 is 2.67768 times greater than strongest gate XNOR2X1
Warning 966: load of 185.084 is 3.18056 times greater than strongest gate NOR2X1
1218 gates exceed specified minimum load.
0 buffers were added.
12 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 2974    	Out: 2974    	+0
	"2" gates	In: 580    	Out: 568    	-12
	"8" gates	In: 1    	Out: 1    	+0

Number of gates changed: 12
gates resized: 12
blifFanout for qflow 1.3.17
Parsing library "osu018_stdcells"
End of library at line 6141
Lib Read:  Processed 6142 lines.
Top internal fanout is 10 (load 540.756) from node _2279_,
driven by NOR2X1 with strength 58.1923 (fF driven at latency 100)
Top fanout load-to-strength ratio is 3.00872 (latency = 300.872 ps)
Top input node fanout is 9 (load 299.13) from node target[3].
Warning 1: load of 550.756 is 2.37789 times greater than strongest gate CLKBUF1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 57: load of 158.217 is 2.67768 times greater than strongest gate XNOR2X1
Warning 976: load of 185.084 is 3.18056 times greater than strongest gate NOR2X1
1228 gates exceed specified minimum load.
0 buffers were added.
0 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 2974    	Out: 2974    	+0
	"2" gates	In: 568    	Out: 568    	+0
	"4" gates	In: 12    	Out: 12    	+0
	"8" gates	In: 1    	Out: 1    	+0

Number of gates changed: 0
gates resized: 0

Generating RTL verilog and SPICE netlist file in directory
	 /home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/synthesis
Files:
   Verilog: /home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/synthesis/modulo_area.rtl.v
   Verilog: /home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/synthesis/modulo_area.rtlnopwr.v
   Verilog: /home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/synthesis/modulo_area.rtlbb.v
   Spice:   /home/erick/Documentos/UCR/UCR_2021/I-2021/Microelectronica/Proyecto_2/repositorio/qflow_area/synthesis/modulo_area.spc

Running blif2Verilog.
Running blif2BSpice.
Running spi2xspice.py
spi2xspice.py "/usr/share/qflow/tech/osu018/osu018_stdcells.lib" -io_time=1n -time=100p -idelay=10p -odelay=100p -cload=500f modulo_area.spc modulo_area.xspice

Synthesis script ended on jue 1 jul 09:13:32 CST 2021
